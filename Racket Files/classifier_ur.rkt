#lang racket
( require racket/trace )
; ---------------------------------------------------------------------
; EXAMPLE COMMANDS
; ( pick-two-cards )
; ( higher-rank ( pick-a-card ) ( pick-a-card ) )
; ( classify-two-cards-ur ( pick-two-cards ) )

; ---------------------------------------------------------------------
; Preliminary Code
;
( define ( ranks rank )
   ( list
      ( list rank 'C )
      ( list rank 'D )
      ( list rank 'H )
      ( list rank 'S )
   )
)
( define ( deck )
   ( append
      ( ranks 2 )
      ( ranks 3 )
      ( ranks 4 )
      ( ranks 5 )
      ( ranks 6 )
      ( ranks 7 )
      ( ranks 8 )
      ( ranks 9 )
      ( ranks 'X )
      ( ranks 'J )
      ( ranks 'Q )
      ( ranks 'K )
      ( ranks 'A )
   )
)
( define ( pick-a-card )
   ( define cards ( deck ) )
   ( list-ref cards ( random ( length cards ) ) )
)
( define ( show card )
   ( display ( rank card ) )
   ( display ( suit card ) )
)
( define ( rank card )
   ( car card )
)
( define ( suit card )
   ( cadr card )
)
( define ( red? card )
   ( or
     ( equal? ( suit card ) 'D )
     ( equal? ( suit card ) 'H )
   )
)
( define ( black? card )
   ( not ( red? card ) )
)
( define ( aces? card1 card2 )
   ( and
      ( equal? ( rank card1 ) 'A )
      ( equal? ( rank card2 ) 'A )
   )
)
; ---------------------------------------------------------------------
; Pick-two-cards Function
;
( define ( pick-two-cards )
   ( define card1 ( pick-a-card ) )
   ( define card2 ( pick-a-card ) )
   ( cond
      ( ( equal? card1 card2 )
         ( pick-two-cards )
      )
      ( else
        ( list card1 card2 )
      )      
   )
)
; ---------------------------------------------------------------------
; Higher-rank Function
;
( define ( higher-rank card1 card2 )
   ( display ( list card1 card2 ) ) ( display "\n" )
   ( cond
      ( ( equal? ( rank card1 ) 'A )
        ( display ( rank card1 ) )
      )
      ( ( equal? ( rank card2 ) 'A )
        ( display ( rank card2 ) )
      )
      ( ( equal? ( rank card1 ) 'K )
        ( display ( rank card1 ) )
      )
      ( ( equal? ( rank card2 ) 'K )
        ( display ( rank card2 ) )
      )
      ( ( equal? ( rank card1 ) 'Q )
        ( display ( rank card1 ) )
      )
      ( ( equal? ( rank card2 ) 'Q )
        ( display ( rank card2 ) )
      )
      ( ( equal? ( rank card1 ) 'J )
        ( display ( rank card1 ) )
      )
      ( ( equal? ( rank card2 ) 'J )
        ( display ( rank card2 ) )
      )
      ( ( equal? ( rank card1 ) 'X )
        ( display ( rank card1 ) )
      )
      ( ( equal? ( rank card2 ) 'X )
        ( display ( rank card2 ) )
      )
      ( else
        ( cond
           ( ( equal? ( rank card1 ) ( rank card2 ) )
             (  rank card1 )
           )
           ( ( > ( rank card1 ) ( rank card2 ) )
             ( display ( rank card1 ) )
           )
           ( ( < ( rank card1 ) ( rank card2 ) )
             ( display ( rank card2 ) )
           )
         )
      )
   )
)
; ---------------------------------------------------------------------
; Classify-two-cards-ur Function
;
( define ( classify-two-cards-ur cards )
   ( display cards ) ( display ": " )
   ( define card1 ( first cards ) )
   ( define card2 ( second cards ) )
   ( cond
      ( ( equal? ( rank card1 ) ( rank card2 ) )
        ( display "Pair of " ) ( display ( rank card1 ) ) ( display "'s" )
      )
      ( ( equal? ( rank card1 ) 'A )
        ( display ( rank card1 ) ) ( display " High" )
      )
      ( ( equal? ( rank card2 ) 'A )
        ( display ( rank card2 ) ) ( display " High" )
      )
      ( ( equal? ( rank card1 ) 'K )
        ( display ( rank card1 ) ) ( display " High" )
      )
      ( ( equal? ( rank card2 ) 'K )
        ( display ( rank card2 ) ) ( display " High" )
      )
      ( ( equal? ( rank card1 ) 'Q )
        ( display ( rank card1 ) ) ( display " High" )
      )
      ( ( equal? ( rank card2 ) 'Q )
        ( display ( rank card2 ) ) ( display " High" )
      )
      ( ( equal? ( rank card1 ) 'J )
        ( display ( rank card1 ) ) ( display " High" )
      )
      ( ( equal? ( rank card2 ) 'J )
        ( display ( rank card2 ) ) ( display " High" )
      )
      ( ( equal? ( rank card1 ) 'X )
        ( display ( rank card1 ) ) ( display " High" )
      )
      ( ( equal? ( rank card2 ) 'X )
        ( display ( rank card2 ) ) ( display " High" )
      )
      ( else
        ( cond
           ( ( > ( rank card1 ) ( rank card2 ) )
             ( display ( rank card1 ) ) ( display " High" )
           )
           ( ( < ( rank card1 ) ( rank card2 ) )
             ( display ( rank card2 ) ) ( display " High" )
           )
         )
      )
   )
   ( straight? card1 card2 )
   ( flush? card1 card2 )
)
; ---------------------------------------------------------------------
; Straight Identifier
;
( define ( straight? card1 card2 )
   ( cond
      ( ( equal? ( rank card1 ) 'A )
        ( cond
           ( ( equal? ( rank card2 ) 'K )
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) 'K )
        ( cond
           ( ( equal? ( rank card2 ) 'A ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) 'Q ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) 'Q )
        ( cond
           ( ( equal? ( rank card2 ) 'K ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) 'J ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) 'J )
        ( cond
           ( ( equal? ( rank card2 ) 'Q ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) 'X ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) 'X )
        ( cond
           ( ( equal? ( rank card2 ) 'J ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) "9" ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '9 )
        ( cond
           ( ( equal? ( rank card2 ) 'X ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '8 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '8 )
        ( cond
           ( ( equal? ( rank card2 ) '9 ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '7 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '7 )
        ( cond
           ( ( equal? ( rank card2 ) '8 ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '6 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '6 )
        ( cond
           ( ( equal? ( rank card2 ) '7 ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '5 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '5 )
        ( cond
           ( ( equal? ( rank card2 ) '6 ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '4 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '4 )
        ( cond
           ( ( equal? ( rank card2 ) '5 ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '3 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '3 )
        ( cond
           ( ( equal? ( rank card2 ) '4 ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '2 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '2 )
        ( cond
           ( ( equal? ( rank card2 ) '3 ) 
             ( display " Straight" )
           )
           ( ( equal? ( rank card2 ) '1 ) 
             ( display " Straight" )
           )
        )
      )
      ( ( equal? ( rank card1 ) '1 )
        ( cond
           ( ( equal? ( rank card2 ) '2 ) 
             ( display " Straight" )
           )
        )
      )
   )
)
; ---------------------------------------------------------------------
; Flush Identifier
;
( define ( flush? card1 card2 )
   ( cond
      ( ( equal? ( suit card1 ) ( suit card2 ) )
         ( display " Flush" )
      )
   )
)
;( trace higher-rank )